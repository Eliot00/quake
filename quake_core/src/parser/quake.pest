earth = {
    action_decl
    | transflow_decl
    | layout_decl
}

action_decl = {
    object ~ "." ~ action ~ parameters? ~ ":"? ~ " "* ~ text?
}

transflow_decl = {
    "transflow" ~ ident ~ "{" ~ (transflow_expr ~ ("," ~ transflow_expr)? ~ ";"?)? ~ "}"
}

transflow_expr = {
    midway | endway
}

midway = {
    from ~ (rest_request | entry_list) ~ "." ~ to ~ l_bracket ~ parameter ~ r_bracket ~ filter_expr?
}

endway = {
    from ~ (rest_request | entry_list) ~ "." ~ to ~ l_bracket ~ component_decl ~ r_bracket ~ filter_expr?
}

filter_expr = {
    "." ~ filter_str ~ l_bracket ~ (double_quoted_string |single_quoted_string) ~ r_bracket
}

filter_str = { "filter" | "FILTER" }

component_decl = {
    "<" ~ component_name ~ ">"
}

component_name = {
    ident
}

from = { "from" }
to = { "to" }

entry_list = {
    l_bracket ~ parameter ~ ("," ~ parameter)* ~ r_bracket
}

parameters = {
    l_bracket ~ parameter ~ ("," ~ parameter)* ~ r_bracket
}

l_bracket = {
    "(" | "（"
}

r_bracket = {
    ")" | "）"
}

layout_decl = {
    "layout" ~ ident ~ "{" ~ flex_child* ~ "}"
}

flex_child = {
    "-" ~ "-"*
    | ("|" ~ component_use_decl)  ~  ("|"  ~  component_use_decl)*  ~  "|"
}

component_use_decl =  {
    sized_empty_comp
  | component_flow
}

component_flow = {
    use_name ~ l_bracket ~ call_flow ~  r_bracket
}

sized_empty_comp = {
    ("EMPTY" | "empty" | "Empty") ~ l_bracket ~ digits ~  ("x" | "X") ~ r_bracket
}

call_flow = {
    "flow" ~ l_bracket ~ string ~ r_bracket ~ ("," ~ digits ~ ("x" | "X"))?
    | component_decl ~ ("," ~ digits ~ ("x" | "X"))?
}

rest_request = {
    // get / post / put / delete
    // token
    l_bracket ~ "rest" ~ l_bracket ~ string ~ r_bracket ~ ("." ~ "get")? ~ r_bracket
}

use_name = { ident }

parameter = {
    digits | single_quoted_string | double_quoted_string
}

digits =  {
   digit+
}

string = @{
    double_quoted_string |
    single_quoted_string
}

double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}

object = { ident }

action = { ident }

text = { ANY* }

ident = { (alpha | digit)+ }

alpha = { 'a'..'z' | 'A'..'Z' | "-" | "_" }
digit = { '0'..'9' }

WHITESPACE = _{ " " | "\t" | NEWLINE }

